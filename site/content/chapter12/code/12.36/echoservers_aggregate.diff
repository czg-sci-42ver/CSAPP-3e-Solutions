--- ../tiny_origin/echoservers.c	2023-05-20 15:49:17.359260695 +0800
+++ echoservers_aggregate.c	2023-05-20 16:21:16.999967879 +0800
@@ -1,26 +1,29 @@
 /*
- * echoservers.c - A concurrent echo server based on select
+ * echoservers.h
  */
-/* $begin echoserversmain */
-#include "csapp.h"
-
-typedef struct {
-  /* Represents a pool of connected descriptors */  // line:conc:echoservers:beginpool
-  int maxfd;                   /* Largest descriptor in read_set */
-  fd_set read_set;             /* Set of all active descriptors */
-  fd_set ready_set;            /* Subset of descriptors ready for reading  */
-  int nready;                  /* Number of ready descriptors from select */
-  int maxi;                    /* Highwater index into client array */
+typedef struct { /* Represents a pool of connected descriptors */ //line:conc:echoservers:beginpool
+  int maxfd;        /* Largest descriptor in read_set */
+  fd_set read_set;  /* Set of all active descriptors */
+  fd_set ready_set; /* Subset of descriptors ready for reading  */
+  int nready;       /* Number of ready descriptors from select */
+  int maxi;         /* Highwater index into client array */
   int clientfd[FD_SETSIZE];    /* Set of active descriptors */
   rio_t clientrio[FD_SETSIZE]; /* Set of active read buffers */
-} pool;                        // line:conc:echoservers:endpool
-/* $end echoserversmain */
+} pool; //line:conc:echoservers:endpool
 void init_pool(int listenfd, pool *p);
 void add_client(int connfd, pool *p);
 void check_clients(pool *p);
-/* $begin echoserversmain */
 
-int byte_cnt = 0; /* Counts total bytes received by server */
+
+
+
+/*
+ * main.c
+ */
+#include <stdio.h>
+
+#include "../csapp.h"
+#include "echoservers.h"
 
 int main(int argc, char **argv) {
   int listenfd, connfd;
@@ -30,9 +33,12 @@
 
   if (argc != 2) {
     fprintf(stderr, "usage: %s <port>\n", argv[0]);
-    exit(0);
+    fprintf(stderr, "use default port 5000\n");
+    listenfd = Open_listenfd("5000");
+  } else {
+    listenfd = Open_listenfd(argv[1]);
   }
-  listenfd = Open_listenfd(argv[1]);
+
   init_pool(listenfd, &pool);  // line:conc:echoservers:initpool
 
   while (1) {
@@ -53,9 +59,16 @@
     check_clients(&pool);  // line:conc:echoservers:checkclients
   }
 }
-/* $end echoserversmain */
+/*
+ * echoservers.c - A concurrent echo server based on select
+ */
+
+#include "../csapp.h"
+#include "tiny.h"
+#include "echoservers.h"
+
+static int byte_cnt = 0; /* Counts total bytes received by server */
 
-/* $begin init_pool */
 void init_pool(int listenfd, pool *p) {
   /* Initially, there are no connected descriptors */
   int i;
@@ -68,9 +81,7 @@
   FD_ZERO(&p->read_set);
   FD_SET(listenfd, &p->read_set);  // line:conc:echoservers:endinit
 }
-/* $end init_pool */
 
-/* $begin add_client */
 void add_client(int connfd, pool *p) {
   int i;
   p->nready--;
@@ -94,9 +105,7 @@
   if (i == FD_SETSIZE) /* Couldn't find an empty slot */
     app_error("add_client error: Too many clients");
 }
-/* $end add_client */
 
-/* $begin check_clients */
 void check_clients(pool *p) {
   int i, connfd, n;
   char buf[MAXLINE];
@@ -109,20 +118,11 @@
     /* If the descriptor is ready, echo a text line from it */
     if ((connfd > 0) && (FD_ISSET(connfd, &p->ready_set))) {
       p->nready--;
-      if ((n = Rio_readlineb(&rio, buf, MAXLINE)) != 0) {
-        byte_cnt += n;  // line:conc:echoservers:beginecho
-        printf("Server received %d (%d total) bytes on fd %d\n", n, byte_cnt,
-               connfd);
-        Rio_writen(connfd, buf, n);  // line:conc:echoservers:endecho
-      }
-
-      /* EOF detected, remove descriptor from pool */
-      else {
-        Close(connfd);                 // line:conc:echoservers:closeconnfd
-        FD_CLR(connfd, &p->read_set);  // line:conc:echoservers:beginremove
-        p->clientfd[i] = -1;           // line:conc:echoservers:endremove
-      }
+
+      doit(connfd);
+      Close(connfd);
+      FD_CLR(connfd, &p->read_set);  // line:conc:echoservers:beginremove
+      p->clientfd[i] = -1;           // line:conc:echoservers:endremove
     }
   }
 }
-/* $end check_clients */
