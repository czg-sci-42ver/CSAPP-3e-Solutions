--- tiny.origin.c	2023-02-26 11:04:36.447612275 +0800
+++ tiny.12.c	2023-05-14 12:32:15.573616042 +0800
@@ -3,9 +3,10 @@
  *     GET method to serve static and dynamic content.
  */
 #include "csapp.h"
+#include <stdio.h>
 
 void doit(int fd);
-void read_requesthdrs(rio_t *rp);
+int read_requesthdrs(rio_t *rp, char *method);
 int parse_uri(char *uri, char *filename, char *cgiargs);
 void serve_static(int fd, char *filename, int filesize);
 void get_filetype(char *filename, char *filetype);
@@ -55,12 +56,20 @@
     return;
   printf("%s", buf);
   sscanf(buf, "%s %s %s", method, uri, version);       //line:netp:doit:parserequest
-  if (strcasecmp(method, "GET")) {                     //line:netp:doit:beginrequesterr
+  int not_post = strcasecmp(method, "POST");
+  if (!(strcasecmp(method, "GET") == 0 || not_post == 0)) {
     clienterror(fd, method, "501", "Not Implemented",
         "Tiny does not implement this method");
     return;
   }                                                    //line:netp:doit:endrequesterr
-  read_requesthdrs(&rio);                              //line:netp:doit:readrequesthdrs
+  int param_len = read_requesthdrs(&rio, method);
+
+  Rio_readnb(&rio, buf, param_len);
+  // if (!not_post) {
+  //   printf("test post");
+  //   Rio_readlineb(&rio, buf, MAXLINE);
+  //   printf("buf:%s,len:%d\n",buf,param_len);
+  // }
 
   /* Parse URI from GET request */
   is_static = parse_uri(uri, filename, cgiargs);       //line:netp:doit:staticcheck
@@ -84,24 +93,29 @@
           "Tiny couldn't run the CGI program");
       return;
     }
-    serve_dynamic(fd, filename, cgiargs);            //line:netp:doit:servedynamic
+    if (strcasecmp(method, "GET") == 0)
+      serve_dynamic(fd, filename, cgiargs);
+    else
+      serve_dynamic(fd, filename, buf);
   }
 }
 
 /*
  * read_requesthdrs - read HTTP request headers
  */
-void read_requesthdrs(rio_t *rp)
+int read_requesthdrs(rio_t *rp, char *method)
 {
   char buf[MAXLINE];
+  int len = 0;
 
-  Rio_readlineb(rp, buf, MAXLINE);
-  printf("%s", buf);
-  while(strcmp(buf, "\r\n")) {          //line:netp:readhdrs:checkterm
+  do {
     Rio_readlineb(rp, buf, MAXLINE);
     printf("%s", buf);
-  }
-  return;
+    if (strcasecmp(method, "POST") == 0 && strncasecmp(buf, "Content-Length:", 15) == 0)
+      sscanf(buf, "Content-Length: %d", &len);
+  } while(strcmp(buf, "\r\n"));
+
+  return len;
 }
 /*
  * parse_uri - parse URI into filename and CGI args
@@ -193,6 +207,7 @@
   if (Fork() == 0) { /* Child */ //line:netp:servedynamic:fork
     /* Real server would set all CGI vars here */
     setenv("QUERY_STRING", cgiargs, 1); //line:netp:servedynamic:setenv
+    printf("cgiargs:%s",cgiargs);
     Dup2(fd, STDOUT_FILENO);         /* Redirect stdout to client */ //line:netp:servedynamic:dup2
     Execve(filename, emptylist, environ); /* Run CGI program */ //line:netp:servedynamic:execve
   }
